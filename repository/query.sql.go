// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: query.sql

package repository

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const deleteCategoryById = `-- name: DeleteCategoryById :one
DELETE
FROM category
WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteCategoryById(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, deleteCategoryById, id)
	err := row.Scan(&id)
	return id, err
}

const deletePostById = `-- name: DeletePostById :one
DELETE
FROM post
WHERE id = $1
RETURNING id
`

func (q *Queries) DeletePostById(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, deletePostById, id)
	err := row.Scan(&id)
	return id, err
}

const deletePostCategoryRelByPostId = `-- name: DeletePostCategoryRelByPostId :exec
DELETE
FROM post_category
WHERE post_id = $1
`

func (q *Queries) DeletePostCategoryRelByPostId(ctx context.Context, postID int64) error {
	_, err := q.db.ExecContext(ctx, deletePostCategoryRelByPostId, postID)
	return err
}

const deletePostTagRelByPostId = `-- name: DeletePostTagRelByPostId :exec
DELETE
FROM post_tag
WHERE post_id = $1
`

func (q *Queries) DeletePostTagRelByPostId(ctx context.Context, postID int64) error {
	_, err := q.db.ExecContext(ctx, deletePostTagRelByPostId, postID)
	return err
}

const deleteTagById = `-- name: DeleteTagById :one
DELETE
FROM tag
WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteTagById(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, deleteTagById, id)
	err := row.Scan(&id)
	return id, err
}

const findAllCategory = `-- name: FindAllCategory :many
SELECT id, category_name, created_at
FROM category
`

func (q *Queries) FindAllCategory(ctx context.Context) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, findAllCategory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.CategoryName, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAllPost = `-- name: FindAllPost :many
SELECT id, title, content, created_at, updated_at, deleted, pub_date, cover_img
FROM post
WHERE deleted = 0
LIMIT $1 OFFSET $2
`

type FindAllPostParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) FindAllPost(ctx context.Context, arg FindAllPostParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, findAllPost, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Deleted,
			&i.PubDate,
			&i.CoverImg,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAllPostTitleList = `-- name: FindAllPostTitleList :many
SELECT po.title
FROM post po
WHERE deleted = 0
ORDER BY po.created_at
`

func (q *Queries) FindAllPostTitleList(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, findAllPostTitleList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var title string
		if err := rows.Scan(&title); err != nil {
			return nil, err
		}
		items = append(items, title)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAllTag = `-- name: FindAllTag :many
SELECT id, tag_name, created_at
FROM tag
`

func (q *Queries) FindAllTag(ctx context.Context) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, findAllTag)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.TagName, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAllUser = `-- name: FindAllUser :many
SELECT id, username, password, created_at, updated_at, deleted
FROM users
`

func (q *Queries) FindAllUser(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, findAllUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findCategoryByCategoryName = `-- name: FindCategoryByCategoryName :one
SELECT id, category_name, created_at
FROM category
WHERE category_name = $1
LIMIT 1
`

func (q *Queries) FindCategoryByCategoryName(ctx context.Context, categoryName sql.NullString) (Category, error) {
	row := q.db.QueryRowContext(ctx, findCategoryByCategoryName, categoryName)
	var i Category
	err := row.Scan(&i.ID, &i.CategoryName, &i.CreatedAt)
	return i, err
}

const findCategoryById = `-- name: FindCategoryById :one
SELECT id, category_name, created_at
FROM category
WHERE id = $1
LIMIT 1
`

func (q *Queries) FindCategoryById(ctx context.Context, id int64) (Category, error) {
	row := q.db.QueryRowContext(ctx, findCategoryById, id)
	var i Category
	err := row.Scan(&i.ID, &i.CategoryName, &i.CreatedAt)
	return i, err
}

const findCategoryByPostId = `-- name: FindCategoryByPostId :many
SELECT cc.id, cc.category_name, cc.created_at
FROM category cc
         JOIN post_category pc ON pc.category_id = cc.id
WHERE pc.post_id = $1
`

func (q *Queries) FindCategoryByPostId(ctx context.Context, postID int64) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, findCategoryByPostId, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.CategoryName, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findCategoryIdsByCategoryNameMatch = `-- name: FindCategoryIdsByCategoryNameMatch :many
SELECT id
FROM category
WHERE category_name = ANY ($1::varchar[])
`

func (q *Queries) FindCategoryIdsByCategoryNameMatch(ctx context.Context, dollar_1 []string) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, findCategoryIdsByCategoryNameMatch, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findPostByCategoryName = `-- name: FindPostByCategoryName :many
SELECT po.id, po.title, po.content, po.created_at, po.updated_at, po.deleted, po.pub_date, po.cover_img
FROM post po
         JOIN post_category pc ON pc.post_id = po."id"
         JOIN category ca ON ca."id" = pc.category_id
WHERE ca.category_name = $1
GROUP BY po."id"
`

func (q *Queries) FindPostByCategoryName(ctx context.Context, categoryName sql.NullString) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, findPostByCategoryName, categoryName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Deleted,
			&i.PubDate,
			&i.CoverImg,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findPostById = `-- name: FindPostById :one
SELECT id, title, content, created_at, updated_at, deleted, pub_date, cover_img
FROM post
WHERE id = $1
LIMIT 1
`

func (q *Queries) FindPostById(ctx context.Context, id int64) (Post, error) {
	row := q.db.QueryRowContext(ctx, findPostById, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Deleted,
		&i.PubDate,
		&i.CoverImg,
	)
	return i, err
}

const findPostByIds = `-- name: FindPostByIds :many
SELECT id, title, content, created_at, updated_at, deleted, pub_date, cover_img
FROM post
WHERE id = ANY ($1::int[])
`

func (q *Queries) FindPostByIds(ctx context.Context, dollar_1 []int32) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, findPostByIds, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Deleted,
			&i.PubDate,
			&i.CoverImg,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findPostByTagName = `-- name: FindPostByTagName :many
SELECT po.id, po.title, po.content, po.created_at, po.updated_at, po.deleted, po.pub_date, po.cover_img
FROM post po
         JOIN post_tag pc ON pc.post_id = po."id"
         JOIN tag ta ON ta."id" = pc.tag_id
WHERE ta.tag_name = $1
GROUP BY po."id"
`

func (q *Queries) FindPostByTagName(ctx context.Context, tagName sql.NullString) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, findPostByTagName, tagName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Deleted,
			&i.PubDate,
			&i.CoverImg,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findPostByTitle = `-- name: FindPostByTitle :one
SELECT po.id, po.title, po.content, po.created_at, po.updated_at, po.deleted, po.pub_date, po.cover_img
FROM post po
WHERE po.deleted = 0
  AND po.title = $1
LIMIT 1
`

func (q *Queries) FindPostByTitle(ctx context.Context, title string) (Post, error) {
	row := q.db.QueryRowContext(ctx, findPostByTitle, title)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Deleted,
		&i.PubDate,
		&i.CoverImg,
	)
	return i, err
}

const findPostCategoryByCategoryId = `-- name: FindPostCategoryByCategoryId :many
SELECT post_id, category_id
FROM post_category
WHERE category_id = $1
`

func (q *Queries) FindPostCategoryByCategoryId(ctx context.Context, categoryID int64) ([]PostCategory, error) {
	rows, err := q.db.QueryContext(ctx, findPostCategoryByCategoryId, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PostCategory
	for rows.Next() {
		var i PostCategory
		if err := rows.Scan(&i.PostID, &i.CategoryID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findPostCategoryByPostId = `-- name: FindPostCategoryByPostId :many
SELECT post_id, category_id
FROM post_category
WHERE post_id = $1
`

func (q *Queries) FindPostCategoryByPostId(ctx context.Context, postID int64) ([]PostCategory, error) {
	rows, err := q.db.QueryContext(ctx, findPostCategoryByPostId, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PostCategory
	for rows.Next() {
		var i PostCategory
		if err := rows.Scan(&i.PostID, &i.CategoryID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findPostTagByPostId = `-- name: FindPostTagByPostId :many
SELECT post_id, tag_id
FROM post_tag
WHERE post_id = $1
`

func (q *Queries) FindPostTagByPostId(ctx context.Context, postID int64) ([]PostTag, error) {
	rows, err := q.db.QueryContext(ctx, findPostTagByPostId, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PostTag
	for rows.Next() {
		var i PostTag
		if err := rows.Scan(&i.PostID, &i.TagID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findPostTagByTagId = `-- name: FindPostTagByTagId :many
SELECT post_id, tag_id
FROM post_tag
WHERE tag_id = $1
`

func (q *Queries) FindPostTagByTagId(ctx context.Context, tagID int64) ([]PostTag, error) {
	rows, err := q.db.QueryContext(ctx, findPostTagByTagId, tagID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PostTag
	for rows.Next() {
		var i PostTag
		if err := rows.Scan(&i.PostID, &i.TagID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findTagById = `-- name: FindTagById :one
SELECT id, tag_name, created_at
FROM tag
WHERE id = $1
LIMIT 1
`

func (q *Queries) FindTagById(ctx context.Context, id int64) (Tag, error) {
	row := q.db.QueryRowContext(ctx, findTagById, id)
	var i Tag
	err := row.Scan(&i.ID, &i.TagName, &i.CreatedAt)
	return i, err
}

const findTagByPostId = `-- name: FindTagByPostId :many
SELECT cc.id, cc.tag_name, cc.created_at
FROM tag cc
         JOIN post_tag pc ON pc.tag_id = cc.id
WHERE pc.post_id = $1
`

func (q *Queries) FindTagByPostId(ctx context.Context, postID int64) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, findTagByPostId, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.TagName, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findTagByTagName = `-- name: FindTagByTagName :one
SELECT id, tag_name, created_at
FROM tag
WHERE tag_name = $1
LIMIT 1
`

func (q *Queries) FindTagByTagName(ctx context.Context, tagName sql.NullString) (Tag, error) {
	row := q.db.QueryRowContext(ctx, findTagByTagName, tagName)
	var i Tag
	err := row.Scan(&i.ID, &i.TagName, &i.CreatedAt)
	return i, err
}

const findTagIdsByTagNameMatch = `-- name: FindTagIdsByTagNameMatch :many
SELECT id
FROM tag
WHERE tag_name = ANY ($1::varchar[])
`

func (q *Queries) FindTagIdsByTagNameMatch(ctx context.Context, dollar_1 []string) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, findTagIdsByTagNameMatch, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findUserByUsername = `-- name: FindUserByUsername :one
SELECT id, username, password, created_at, updated_at, deleted
FROM users
WHERE username = $1
LIMIT 1
`

func (q *Queries) FindUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Deleted,
	)
	return i, err
}

const findUserByUsernameAndPwd = `-- name: FindUserByUsernameAndPwd :one
SELECT id, username, password, created_at, updated_at, deleted
FROM users
WHERE username = $1
  AND password = $2
LIMIT 1
`

type FindUserByUsernameAndPwdParams struct {
	Username string
	Password string
}

func (q *Queries) FindUserByUsernameAndPwd(ctx context.Context, arg FindUserByUsernameAndPwdParams) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByUsernameAndPwd, arg.Username, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Deleted,
	)
	return i, err
}

const saveCategory = `-- name: SaveCategory :one
INSERT INTO category(category_name)
VALUES ($1)
ON CONFLICT (category_name) DO NOTHING
RETURNING id, category_name, created_at
`

func (q *Queries) SaveCategory(ctx context.Context, categoryName sql.NullString) (Category, error) {
	row := q.db.QueryRowContext(ctx, saveCategory, categoryName)
	var i Category
	err := row.Scan(&i.ID, &i.CategoryName, &i.CreatedAt)
	return i, err
}

const savePost = `-- name: SavePost :one
INSERT INTO post(title, content, cover_img, pub_date)
VALUES ($1, $2, $3, $4)
ON CONFLICT (title) DO UPDATE SET content=$2,
                                  cover_img=$3,
                                  pub_date=$4
RETURNING id, title, content, created_at, updated_at, deleted, pub_date, cover_img
`

type SavePostParams struct {
	Title    string
	Content  sql.NullString
	CoverImg sql.NullString
	PubDate  sql.NullTime
}

func (q *Queries) SavePost(ctx context.Context, arg SavePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, savePost,
		arg.Title,
		arg.Content,
		arg.CoverImg,
		arg.PubDate,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Deleted,
		&i.PubDate,
		&i.CoverImg,
	)
	return i, err
}

const savePostCategory = `-- name: SavePostCategory :exec
INSERT INTO post_category(post_id, category_id)
VALUES ($1, $2)
ON CONFLICT (post_id,category_id) DO NOTHING
`

type SavePostCategoryParams struct {
	PostID     int64
	CategoryID int64
}

func (q *Queries) SavePostCategory(ctx context.Context, arg SavePostCategoryParams) error {
	_, err := q.db.ExecContext(ctx, savePostCategory, arg.PostID, arg.CategoryID)
	return err
}

const savePostTag = `-- name: SavePostTag :exec
INSERT INTO post_tag(post_id, tag_id)
VALUES ($1, $2)
ON CONFLICT (post_id,tag_id) DO NOTHING
`

type SavePostTagParams struct {
	PostID int64
	TagID  int64
}

func (q *Queries) SavePostTag(ctx context.Context, arg SavePostTagParams) error {
	_, err := q.db.ExecContext(ctx, savePostTag, arg.PostID, arg.TagID)
	return err
}

const saveTag = `-- name: SaveTag :one
INSERT INTO tag(tag_name)
VALUES ($1)
ON CONFLICT (tag_name) DO NOTHING
RETURNING id, tag_name, created_at
`

func (q *Queries) SaveTag(ctx context.Context, tagName sql.NullString) (Tag, error) {
	row := q.db.QueryRowContext(ctx, saveTag, tagName)
	var i Tag
	err := row.Scan(&i.ID, &i.TagName, &i.CreatedAt)
	return i, err
}

const saveUser = `-- name: SaveUser :one
INSERT INTO users(username, password)
VALUES ($1, $2)
ON CONFLICT (username) DO NOTHING
RETURNING id, username, password, created_at, updated_at, deleted
`

type SaveUserParams struct {
	Username string
	Password string
}

func (q *Queries) SaveUser(ctx context.Context, arg SaveUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, saveUser, arg.Username, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Deleted,
	)
	return i, err
}
